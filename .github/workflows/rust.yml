name: Rust

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine_stable:
    runs-on: ubuntu-latest
    outputs:
      stable: ${{ steps.flag.outputs.stable }}
    steps:
      - name: Determine stable flag
        id: flag
        run: |
          if [ "${{ github.event_name }}" != "push" ]; then
            echo "stable=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          MSG="${{ github.event.head_commit.message }}"
          if echo "$MSG" | grep -q '\[stable\]'; then
            echo "stable=true" >> $GITHUB_OUTPUT
          else
            echo "stable=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    #needs: determine_stable
    outputs:
      docker_needed: ${{ steps.check.outputs.docker_needed }}
    env:
      CARGO_TERM_COLOR: always
      CARGO_TARGET_DIR: target-default
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Cache cargo (default)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ${{ env.CARGO_TARGET_DIR }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-default
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-

      - name: Build (default)
        run: cargo +nightly build --release --verbose

      - name: Test
        run: cargo +nightly test --release --verbose

      - name: Prepare default artifact
        run: |
          mkdir -p release
          cp ${{ env.CARGO_TARGET_DIR }}/release/lure release/lure
          chmod +x release/lure
          sha256sum release/lure | tee release/lure.sha256

      - name: Upload default artifact
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: |
            release/lure
            release/lure.sha256
          if-no-files-found: error
          overwrite: true

      - name: Docker needed
        id: check
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || true)
          if echo "$CHANGED_FILES" | grep -qE '^(src/|Cargo\.toml|Cargo\.lock|\.github/workflows/|Dockerfile\.copy)'; then
            echo "docker_needed=true" >> $GITHUB_OUTPUT
          else
            echo "docker_needed=false" >> $GITHUB_OUTPUT
          fi

  stable_build:
    runs-on: ubuntu-latest
    needs: determine_stable
    if: needs.determine_stable.outputs.stable == 'true'
    env:
      CARGO_TERM_COLOR: always
      CARGO_TARGET_DIR: target-stable
      RUSTFLAGS: "-Zdylib-lto -C opt-level=3 -C lto=fat -C codegen-units=8 --cfg tokio_unstable -C embed-bitcode=yes -C panic=abort -C incremental=no -C target-cpu=x86-64-v3"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Cache cargo (stable)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ${{ env.CARGO_TARGET_DIR }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-stable
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-

      - name: Build [stable] variant
        run: |
          cargo +nightly build --release --verbose
          mkdir -p release-stable
          cp ${{ env.CARGO_TARGET_DIR }}/release/lure release-stable/lure
          chmod +x release-stable/lure
          sha256sum release-stable/lure | tee release-stable/lure.sha256

      - name: Upload [stable] artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-stable
          path: |
            release-stable/lure
            release-stable/lure.sha256
          if-no-files-found: error
          overwrite: true
          
  docker_release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && needs.build.outputs.docker_needed == 'true'
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Download release artifact (to repo root)
        uses: actions/download-artifact@v4
        with:
          name: release
          path: .
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.1.1"

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push (default)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.copy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  docker_release_stable:
    runs-on: ubuntu-latest
    needs: stable_build
    if: github.ref == 'refs/heads/main' && needs.stable_build.result == 'success'
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Download [stable] artifact (to repo root)
        uses: actions/download-artifact@v4
        with:
          name: release-stable
          path: .
          
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.1.1"

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=stable
            type=sha,format=long,prefix=stable-

      - name: Build and push ([stable])
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.copy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
